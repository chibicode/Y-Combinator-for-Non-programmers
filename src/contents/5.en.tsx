import React from 'react'
import EpisodeCardList from 'src/components/EpisodeCardList'
import {
  P,
  Highlight,
  HighlightBold,
  Ul,
  UlLi,
  Ol,
  OlLi,
  Bold,
  Hr,
  Italic
} from 'src/components/ContentTags'
import BubbleQuotes from 'src/components/BubbleQuotes'
import H from 'src/components/H'
import EmojiWithText from 'src/components/EmojiWithText'
import TopLeftBadgeWrapper from 'src/components/TopLeftBadgeWrapper'
import EmojiForLetter from 'src/components/EmojiForLetter'
import EmojiSeparator from 'src/components/EmojiSeparator'
import CustomEmoji from 'src/components/CustomEmoji'
import Emoji from 'src/components/Emoji'
import InlinePrioritiesLabel from 'src/components/InlinePrioritiesLabel'
import InlineBackground from 'src/components/InlineBackground'
import BottomRightBadge from 'src/components/BottomRightBadge'
import YesNoButtons from 'src/components/YesNoButtons'
import * as R from 'src/components/Runners'
import NextLessonButton from 'src/components/NextLessonButton'
import {
  InstructionTwo,
  InstructionThree,
  InstructionFour
} from 'src/contents/4.en'

export const ThreeRowRules = () => (
  <>
    <P>
      <Bold>Here‚Äôs how to solve a lunchbox puzzle with at least 3 rows.</Bold>
    </P>
    <Ol>
      <OlLi>
        <Highlight>
          First, start with the pair of{' '}
          <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs.
        </Highlight>
      </OlLi>
      <OlLi>
        <Highlight>
          Label the center item on the bottom row as{' '}
          <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />, and
          you can ignore this for the rest of the iteration.
        </Highlight>
      </OlLi>
      <OlLi>
        <Highlight>
          After finishing the pair of{' '}
          <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs,
          <InlinePrioritiesLabel>2</InlinePrioritiesLabel> will become{' '}
          <InlinePrioritiesLabel>1</InlinePrioritiesLabel>. Then, repeat.
        </Highlight>
      </OlLi>
    </Ol>
    <R.Vdhd>Lunchbox with 3 rows</R.Vdhd>
  </>
)

export const Beginner5Rules = () => (
  <>
    <P>
      <Bold>Additional Rule 1:</Bold> If there are multiple pairs of{' '}
      <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs,{' '}
      <HighlightBold>start with the leftmost pair</HighlightBold>.
    </P>
    <R.Hykj>
      <H args={{ name: 'startWithLeftMostOneCaption' }} />
    </R.Hykj>
    <P>
      <Bold>Note:</Bold>{' '}
      <Highlight>
        If there‚Äôs no <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs on the
        leftmost edge of a lunchbox, then start with the inner pair of{' '}
        <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs.
      </Highlight>
    </P>
    <R.Myjz>
      If there‚Äôs no <InlinePrioritiesLabel>1</InlinePrioritiesLabel> on the
      <br />
      leftmost edge of a lunchbox, then start with
      <br />
      the inner pair of
      <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs
    </R.Myjz>
    <Hr />
    <P>
      <Bold>Additional Rule 2:</Bold> If you can‚Äôt start with{' '}
      <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs because there‚Äôs only
      one item on the bottom row,{' '}
      <HighlightBold>
        start with the pair of <InlinePrioritiesLabel>2</InlinePrioritiesLabel>
        ‚Äôs.
      </HighlightBold>
    </P>
    <R.Zemy>
      <H args={{ name: 'startWithTwoCaption' }} />
    </R.Zemy>
  </>
)

const WillReturn = () => (
  <>
    <EmojiSeparator
      emojis={['‚ùì', 'üòà', '‚ùì']}
      noBottomMargin
      description={
        <>
          On the upcoming intermediate levels,
          <br />I will give you a <Italic>difficult</Italic> question.
          <br />
          It can be solved by applying the rules
          <br />
          we cover on this page.
        </>
      }
    />
    <EmojiSeparator
      noTopMargin
      nodes={[
        <Emoji>‚ú®</Emoji>,
        <CustomEmoji type="mathBox" />,
        <Emoji>‚ú®</Emoji>
      ]}
      description={
        <>
          If you can solve it,
          <br />
          you‚Äôll get your mathboxes back!
        </>
      }
    />
  </>
)

export default () => (
  <EpisodeCardList
    underConstruction
    cards={[
      {
        type: 'summary',
        title: <>The last page of beginner levels</>,
        content: (
          <>
            <P>
              <Bold>This is the last page of beginner levels.</Bold> Thank you
              for following along so far!
            </P>
            <EmojiSeparator
              emojis={['‚ú®', 'ü§ó', '‚ú®']}
              description={<>THe last page of beginner levels!</>}
            />
            <P>
              <Emoji>‚ö†Ô∏è</Emoji> <Bold>Warning:</Bold>{' '}
              <H
                args={{
                  name: 'bentoBoxPuzzle',
                  capitalize: true,
                  postfix: 's'
                }}
              />{' '}
              on this page are <Italic>much harder</Italic> than before. But I
              think you‚Äôll still be able to solve them. Good luck!
            </P>
            <EmojiSeparator
              emojis={['‚ö†Ô∏è', 'üç±', '‚ö†Ô∏è']}
              description={<>The puzzles are hard, but you can do it!</>}
            />
          </>
        )
      },
      {
        title: <>Lunchboxes with 3 Rows </>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        From now on, you‚Äôll be solving much harder puzzles like
                        this one:
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Cvtc>
              <H args={{ name: 'bentoBoxPuzzle', capitalize: true }} /> with{' '}
              <Italic>3 rows</Italic>
            </R.Cvtc>
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        Hmm‚Ä¶ previously, we‚Äôve only dealt with lunchboxes with 2
                        rows.
                      </P>
                      <P>
                        But <Italic>this one has 3 rows</Italic> vertically.
                      </P>
                    </>
                  )
                },
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        Also,{' '}
                        <Italic>there are 3 items on the bottom row</Italic>:{' '}
                        <EmojiWithText letter="a" />, a{' '}
                        <EmojiWithText letter="b" />, and another{' '}
                        <EmojiWithText letter="a" />.
                      </P>
                      <P>
                        None of the lunchboxes we saw on the last page had 3
                        items in one row.
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        Right. Also, did you realize that{' '}
                        <Italic>
                          there are numbers like{' '}
                          <InlinePrioritiesLabel>1</InlinePrioritiesLabel> and{' '}
                          <InlinePrioritiesLabel>2</InlinePrioritiesLabel> on
                          the left edge?
                        </Italic>
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Cvtc>
              There are numbers like{' '}
              <InlinePrioritiesLabel>1</InlinePrioritiesLabel> and{' '}
              <InlinePrioritiesLabel>2</InlinePrioritiesLabel>
              <br />
              on the left edge
            </R.Cvtc>
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>That‚Äôs true‚Ä¶</P>
                      <P>How should we solve puzzles like this?</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Bold>So, first:</Bold>{' '}
                        <Italic>
                          I‚Äôll explain how to solve lunchbox puzzles with 3
                          rows.
                        </Italic>
                      </P>
                      <P>
                        <Bold>Then:</Bold>{' '}
                        <Italic>
                          I will give you{' '}
                          <H args={{ name: 'yesNoQuiz', postfix: 'zes' }} /> to
                          solve.
                        </Italic>
                      </P>
                    </>
                  )
                },
                {
                  type: 'brave',
                  children: (
                    <>
                      <P>Ok, sounds good!</P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            First, focus on the pair of{' '}
            <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs
          </>
        ),
        content: (
          <>
            <P>
              <Bold>
                The first step in solving{' '}
                <H args={{ name: 'bentoBoxPuzzle', indefinite: true }} /> with 3
                rows:
              </Bold>{' '}
              <Highlight>
                Focus on the pair of{' '}
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs.
              </Highlight>
            </P>
            <EmojiSeparator
              nodes={[
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>,
                <Emoji>üç±</Emoji>,
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>
              ]}
              description={
                <>
                  Focus on the pair of{' '}
                  <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs
                </>
              }
            />
            <P>
              <Bold>More specifically:</Bold>{' '}
              <Highlight>
                Take a look at the{' '}
                <Italic>
                  sections that have a{' '}
                  <InlinePrioritiesLabel>1</InlinePrioritiesLabel> on its
                  top-left corner or bottom-left corner.
                </Italic>
              </Highlight>
            </P>
            <P>
              Let‚Äôs see what that means. <H args={{ name: 'pressNext' }} />
            </P>
            <R.Aaov />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        The pair of{' '}
                        <InlinePrioritiesLabel>1</InlinePrioritiesLabel>
                        ‚Äôs became pink{' '}
                        <InlinePrioritiesLabel revert>1</InlinePrioritiesLabel>
                        ‚Äôs!
                      </P>
                      <P>
                        Also, the top row now has a darker color{' '}
                        <InlineBackground bgColor={'indigo50'} />.
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        Right. This means{' '}
                        <Highlight>
                          focus on <Italic>the bottom 2 rows</Italic>, which
                          correspond to the pair of{' '}
                          <InlinePrioritiesLabel revert>
                            1
                          </InlinePrioritiesLabel>
                          ‚Äôs, and <Italic>ignore</Italic> the top row{' '}
                          <InlineBackground bgColor={'indigo50'} /> for now.
                        </Highlight>
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcBound" /> and{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
          </>
        ),
        content: (
          <>
            <P>
              Next, <Highlight>we add the labels.</Highlight>{' '}
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Qxob />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        <Bold>Wait a minute:</Bold> In addition to{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="callArg"
                        />{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcArg"
                        />
                        , and{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcBound"
                        />
                        ‚Ä¶
                      </P>
                      <P>
                        <Highlight>
                          <Italic>
                            There‚Äôs a new label{' '}
                            <BottomRightBadge
                              inline
                              bottomRightBadgeType="funcUnbound"
                            />{' '}
                            for the <EmojiWithText letter="b" />!
                          </Italic>
                        </Highlight>
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Bold>Yes, this is new:</Bold>{' '}
                        <Highlight>
                          None of{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="callArg"
                          />
                          ,{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcArg"
                          />
                          , or{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcBound"
                          />{' '}
                          apply to the <Bold>middle item</Bold> on the bottom
                          row.
                        </Highlight>
                      </P>
                      <P>
                        <Highlight>
                          In that case, we add the label{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcUnbound"
                          />{' '}
                          (for ‚Äú<Bold>M</Bold>iddle‚Äù) to it.
                        </Highlight>
                      </P>
                    </>
                  )
                }
              ]}
            />
            <EmojiSeparator
              nodes={[
                <EmojiForLetter letter="b" />,
                <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />,
                <EmojiForLetter letter="b" />
              ]}
              description={
                <>
                  Add{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />{' '}
                  to the middle item
                  <br />
                  on the bottom row
                </>
              }
            />
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        I see. Then what do we do with the{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcUnbound"
                        />
                        ‚Äôs?
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            Ignore{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
            ‚Äôs
          </>
        ),
        content: (
          <>
            <P>
              <Bold>Answer:</Bold>{' '}
              <Highlight>
                You can ignore{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
                ‚Äôs for now.
              </Highlight>
            </P>
            <EmojiSeparator
              nodes={[
                <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />,
                <Emoji>üôÑ</Emoji>,
                <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
              ]}
              description={
                <>
                  Ignore{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
                  ‚Äôs for now
                </>
              }
            />
            <P>
              <Bold>Why?</Bold> Take a look at the next steps:
            </P>
            <Ul>
              <UlLi>
                <Bold>Match:</Bold>{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
                <Emoji>‚úÖ</Emoji>
              </UlLi>
              <UlLi>
                <Bold>Copy:</Bold>{' '}
                <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
                <Emoji>‚ÜòÔ∏è</Emoji>{' '}
                <TopLeftBadgeWrapper topLeftBadgeType="match">
                  <BottomRightBadge inline bottomRightBadgeType="funcBound" />
                </TopLeftBadgeWrapper>
              </UlLi>
              <UlLi>
                <Bold>Remove:</Bold> <Emoji>üí•</Emoji>{' '}
                <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />
              </UlLi>
            </Ul>
            <P>
              <Italic>
                None of them involves{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
              </Italic>
              .{' '}
              <Highlight>
                So, while we do these next steps, you can ignore{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
                ‚Äôs.
              </Highlight>
            </P>
            <R.Pbhg>
              Ignore the <EmojiWithText letter="b" /> labeled as{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
              <br />
              for the next several steps
            </R.Pbhg>
            <BubbleQuotes
              quotes={[
                {
                  type: 'smile',
                  children: (
                    <>
                      <P>Got it. Let‚Äôs continue then!</P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            Finish the pair of{' '}
            <InlinePrioritiesLabel revert>1</InlinePrioritiesLabel>‚Äôs
          </>
        ),
        content: (
          <>
            <P>
              <Bold>Next:</Bold>{' '}
              <Highlight>
                We‚Äôll finish the section that belongs to the pair of{' '}
                <InlinePrioritiesLabel revert>1</InlinePrioritiesLabel>‚Äôs
              </Highlight>
              .
            </P>
            <EmojiSeparator
              nodes={[
                <InlinePrioritiesLabel revert>1</InlinePrioritiesLabel>,
                <Emoji>üç±</Emoji>,
                <InlinePrioritiesLabel revert>1</InlinePrioritiesLabel>
              ]}
              description={
                <>
                  Finish the pair of{' '}
                  <InlinePrioritiesLabel revert>1</InlinePrioritiesLabel>‚Äôs
                </>
              }
            />
            <P>
              This will be a review of the last page! <Emoji>üòâ</Emoji>
            </P>
            <P>
              <Bold>First:</Bold> <InstructionTwo />{' '}
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Wwtl />
            <P>
              <Bold>Next:</Bold> <InstructionThree />
            </P>
            <R.Ltpe />
            <P>
              <Bold>Finally:</Bold> <InstructionFour />
            </P>
            <R.Apuz />
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        See, <Italic>none of the above steps involved</Italic>{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcUnbound"
                        />
                        , right?
                      </P>
                    </>
                  )
                },
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        I see, that‚Äôs why we can ignore{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcUnbound"
                        />{' '}
                        for now.
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            <InlinePrioritiesLabel revert>1</InlinePrioritiesLabel>‚Äôs disappear,
            and <InlinePrioritiesLabel>2</InlinePrioritiesLabel>‚Äôs become{' '}
            <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs
          </>
        ),
        content: (
          <>
            <P>
              Let‚Äôs keep going! <H args={{ name: 'pressNext' }} />
            </P>
            <R.Uwma />
            <Ul>
              <UlLi>
                <BottomRightBadge inline bottomRightBadgeType="callArg" /> and{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcArg" /> are
                removed,
              </UlLi>
              <UlLi>
                <Highlight>
                  The pair of{' '}
                  <InlinePrioritiesLabel revert>1</InlinePrioritiesLabel>‚Äôs are
                  also removed, and‚Ä¶
                </Highlight>
              </UlLi>
              <UlLi>
                <Highlight>
                  The pair of <InlinePrioritiesLabel>2</InlinePrioritiesLabel>‚Äôs
                  became the <Italic>new</Italic> pair of{' '}
                  <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs.
                </Highlight>
              </UlLi>
            </Ul>
            <EmojiSeparator
              nodes={[
                <InlinePrioritiesLabel>2</InlinePrioritiesLabel>,
                <CustomEmoji type="singleArrow" />,
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>
              ]}
            />
          </>
        )
      },
      {
        title: <>Finish the remaining part</>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        This now looks like lunchboxes from the previous page!
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Jwue>We now have a simpler lunchbox</R.Jwue>
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Yes. Also, notice that:</P>
                      <Ul>
                        <UlLi>
                          The <EmojiWithText letter="b" /> was labeled as{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcUnbound"
                          />{' '}
                          earlier‚Ä¶
                        </UlLi>
                        <UlLi>
                          But{' '}
                          <Italic>
                            it will now be labeled as{' '}
                            <BottomRightBadge
                              inline
                              bottomRightBadgeType="funcArg"
                            />
                          </Italic>
                          , because it‚Äôs on the ‚Äú<Bold>L</Bold>eft‚Äù now.
                        </UlLi>
                      </Ul>
                    </>
                  )
                }
              ]}
            />
            <R.Sgnp>
              The <EmojiWithText letter="b" /> is now labeled as{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcArg" />
            </R.Sgnp>
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        Let‚Äôs keep going to the end.{' '}
                        <H args={{ name: 'pressFastForward' }} />
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              <H args={{ name: 'pressFastForward', mentionRightArrow: true }} />
            </P>
            <R.Kvso />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        We‚Äôre left with a <EmojiWithText letter="c" />!
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>That‚Äôs it! Were you able to follow?</P>
                    </>
                  )
                },
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>I think so?</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Ok, let‚Äôs do a review just in case.</P>
                      <P>
                        We‚Äôll run it from the beginning to the end using the{' '}
                        <H args={{ name: 'fastForward' }} /> button.
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              <H args={{ name: 'pressFastForward', mentionRightArrow: true }} />
            </P>
            <R.Beiz />
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        <Bold>To summarize:</Bold>
                      </P>
                      <Ol>
                        <OlLi>
                          <Highlight>
                            Start with the pair of{' '}
                            <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs.
                          </Highlight>
                        </OlLi>
                        <OlLi>
                          <Highlight>
                            Label the middle item on the bottom row as{' '}
                            <BottomRightBadge
                              inline
                              bottomRightBadgeType="funcUnbound"
                            />
                            , and ignore it.
                          </Highlight>
                        </OlLi>
                        <OlLi>
                          <Highlight>
                            After finishing the pair of{' '}
                            <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs,
                            the pair of{' '}
                            <InlinePrioritiesLabel>2</InlinePrioritiesLabel>‚Äôs
                            becomes{' '}
                            <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs.
                          </Highlight>
                        </OlLi>
                      </Ol>
                      <P>Is this right?</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        Perfect!{' '}
                        <Highlight>
                          Let‚Äôs do a{' '}
                          <Bold>
                            <H args={{ name: 'yesNoQuiz' }} />
                          </Bold>{' '}
                          to check your understanding!
                        </Highlight>
                      </P>
                    </>
                  )
                },
                {
                  type: 'brave',
                  children: (
                    <>
                      <P>Alright, bring it on!</P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        type: 'yesNoQuiz',
        title: (
          <>
            <H args={{ name: 'yesNoQuiz' }} />
          </>
        ),
        content: (
          <>
            <P>
              <H args={{ name: 'lookAtThisBentoBox' }} />:
            </P>
            <R.Dkiy />
            <P>
              <H args={{ name: 'whatHappensAtTheEndQuestion' }} />
            </P>
            <R.Yiri />
            <YesNoButtons answer="yes" />
          </>
        )
      },
      {
        title: (
          <>
            <H args={{ name: 'theAnswerIs', isYes: true }} />
          </>
        ),
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        <H
                          args={{
                            name: 'theAnswerIs',
                            isYes: true,
                            sentence: true
                          }}
                        />
                        . We should be left with a bowl of{' '}
                        <EmojiWithText letter="h" /> at the end.
                      </P>
                      <P>
                        Let‚Äôs{' '}
                        <H args={{ name: 'fastForward', lowerCase: true }} /> it
                        to check!
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              <H args={{ name: 'pressFastForward', mentionRightArrow: true }} />
            </P>
            <R.Hdxc />
            <BubbleQuotes
              quotes={[
                {
                  type: 'happy',
                  children: (
                    <>
                      <P>
                        We‚Äôre left with the <EmojiWithText letter="h" />. So{' '}
                        <H
                          args={{
                            name: 'theAnswerIs',
                            isYes: true,
                            lowerCase: true
                          }}
                        />
                        !
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Hmm‚Ä¶ good job!</P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: <>Two Additional Rules</>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'wink',
                  children: (
                    <>
                      <P>
                        So‚Ä¶ <Italic>did we win?</Italic> Can you return
                        mathboxes to us now? <CustomEmoji type="mathBox" />
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Italic>Not yet.</Italic> I still haven‚Äôt given you
                        questions regarding the{' '}
                        <HighlightBold>additional rules</HighlightBold> of a
                        lunchbox.
                      </P>
                    </>
                  )
                }
              ]}
            />
            <EmojiSeparator
              emojis={['‚ùì', 'üç±', '‚ùì']}
              description={<>The additional rules‚Ä¶?</>}
            />
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        <Bold>The additional rules?</Bold> What are you talking
                        about?
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Well, take a look at the following lunchbox:</P>
                    </>
                  )
                }
              ]}
            />
            <R.Laea>
              There are two pairs of{' '}
              <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs
            </R.Laea>
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        Hmm‚Ä¶ this is new.{' '}
                        <Italic>
                          There are two pairs of{' '}
                          <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs
                        </Italic>
                        .
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Next, how about this one?</P>
                    </>
                  )
                }
              ]}
            />
            <R.Gtdu>
              There‚Äôs only item (a <EmojiWithText letter="b" />)<br />
              on the bottom row
            </R.Gtdu>
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        This one looks new too.{' '}
                        <Italic>
                          There‚Äôs only one item (a <EmojiWithText letter="b" />)
                          on the bottom row.
                        </Italic>
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: <>You need to know about the additional rules</>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        In order to solve puzzles like the above, you need to
                        know about the <Bold>additional rules</Bold> of a
                        lunchbox.
                      </P>
                    </>
                  )
                }
              ]}
            />
            <EmojiSeparator
              emojis={['‚ùì', 'üç±', '‚ùì']}
              description={
                <>
                  You need the <Bold>additional rules</Bold> to
                  <br />
                  solve puzzles like the above
                </>
              }
            />
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        There are <Italic>two additional rules</Italic> you need
                        to know.
                      </P>
                      <P>
                        After explaining them, I‚Äôll give you more{' '}
                        <H args={{ name: 'yesNoQuiz', postfix: 'zes' }} />!
                      </P>
                    </>
                  )
                },
                {
                  type: 'crying',
                  children: (
                    <>
                      <P>
                        What, <Italic>more quizzes</Italic>? When will you
                        return the mathboxes to us?{' '}
                        <CustomEmoji type="mathBox" />
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Well: </P>
                      <Ul>
                        <UlLi>
                          <Highlight>
                            On the <Bold>intermediate levels</Bold>, which start
                            from the next page, I‚Äôll give you a{' '}
                            <Italic>very difficult question</Italic>.
                          </Highlight>
                        </UlLi>
                        <UlLi>
                          You‚Äôll be able to solve it by applying the rules we
                          cover on this page.
                        </UlLi>
                      </Ul>
                      <P>
                        <Highlight>
                          I‚Äôll give you the mathboxes back if you solve it!{' '}
                          <CustomEmoji type="mathBox" />
                        </Highlight>
                      </P>
                    </>
                  )
                }
              ]}
            />
            <WillReturn />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        Really? So we‚Äôre pretty close to getting our mathboxes
                        back!
                      </P>
                    </>
                  )
                },
                {
                  type: 'brave',
                  children: (
                    <>
                      <P>
                        <Bold>In that case:</Bold> Let‚Äôs finish the rest of this
                        page quickly so we can move on to the intermediate
                        levels!
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        Alright, I will explain the{' '}
                        <Bold>additional rules</Bold> then.
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            Additional Rule 1: Start with the leftmost pair of{' '}
            <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs
          </>
        ),
        content: (
          <>
            <P>
              Take a look at this <H args={{ name: 'bentoBoxPuzzle' }} />, which
              has two pairs of <InlinePrioritiesLabel>1</InlinePrioritiesLabel>
              ‚Äôs:
            </P>
            <R.Laea>
              There are two pairs of{' '}
              <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs
            </R.Laea>
            <P>
              <Bold>Additional Rule 1:</Bold>{' '}
              <Highlight>
                If there are more than one pair of{' '}
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>‚Äôs,{' '}
                <Italic>start with the leftmost</Italic> pair.
              </Highlight>
            </P>
            <R.Aezk>
              Start with the <Italic>leftmost</Italic> pair
            </R.Aezk>
            <Hr />
            <P>
              <Bold>Then, here‚Äôs a question:</Bold> What will happen to the
              labels? <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
            </P>
            <EmojiSeparator
              nodes={[
                <BottomRightBadge inline bottomRightBadgeType="callArg" />,
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />,
                <BottomRightBadge inline bottomRightBadgeType="funcBound" />,
                <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />
              ]}
            />
            <P>
              First, the top <EmojiWithText letter="a" /> will be labeled as{' '}
              <BottomRightBadge inline bottomRightBadgeType="callArg" />.
            </P>
            <R.Igrl />
            <P>
              Next, the bottom-left <EmojiWithText letter="b" /> will be labeled
              as <BottomRightBadge inline bottomRightBadgeType="funcArg" />.
            </P>
            <R.Uppk />
            <P>
              Next, the right <EmojiWithText letter="b" /> and the right{' '}
              <EmojiWithText letter="c" /> will be labeled as{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcBound" />.
            </P>
            <R.Qfbk />
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Bold>Note:</Bold>{' '}
                        <Highlight>
                          Any item that <Italic>touches</Italic> the{' '}
                          <Bold>right edge</Bold> of the lunchbox will be
                          labeled as{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcBound"
                          />
                          .
                        </Highlight>
                      </P>
                      <P>
                        <Bold>Therefore:</Bold> The right{' '}
                        <EmojiWithText letter="b" /> will be labeled as{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcBound"
                        />
                        , even though it <Italic>looks like</Italic> it‚Äôs in the
                        middle.
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              Finally, the remaining <EmojiWithText letter="c" /> will be
              labeled as{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />.
            </P>
            <R.Yfwd />
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Highlight>
                          If none of{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="callArg"
                          />
                          ,{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcArg"
                          />
                          , or{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcBound"
                          />{' '}
                          applies, then we use{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcUnbound"
                          />{' '}
                          for those items.
                        </Highlight>
                      </P>
                    </>
                  )
                }
              ]}
            />
            <Hr />
            <P>
              Now, the <EmojiWithText letter="b" postfix="es" /> match:
            </P>
            <R.Dtzu />
            <P>
              And the <EmojiWithText letter="a" /> gets copied:
            </P>
            <R.Vilr />
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>Hmm‚Ä¶ it‚Äôs pretty difficult.</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        The rest is simple though. Let‚Äôs{' '}
                        <H args={{ name: 'fastForward', lowerCase: true }} /> it
                        from here.
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              <H args={{ name: 'pressFastForward' }} />
            </P>
            <R.Izgz />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        We‚Äôre left with <EmojiWithText letter="a" />!
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Yes. Hope you were following along!</P>
                      <P>
                        Let‚Äôs do a <H args={{ name: 'yesNoQuiz' }} /> now.
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        type: 'yesNoQuiz',
        title: (
          <>
            <H args={{ name: 'yesNoQuiz' }} />
          </>
        ),
        content: (
          <>
            <P>
              <H args={{ name: 'lookAtThisBentoBox' }} />:
            </P>
            <R.Wcer />
            <P>
              <H args={{ name: 'whatHappensAtTheEndQuestion' }} />
            </P>
            <R.Mqvu />
            <YesNoButtons answer="no" />
          </>
        )
      },
      {
        title: (
          <>
            <H args={{ name: 'theAnswerIs', isYes: false }} />
          </>
        ),
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        <H
                          args={{
                            name: 'theAnswerIs',
                            isYes: false,
                            sentence: true
                          }}
                        />
                        . We should be left with <EmojiWithText letter="d" />{' '}
                        instead of <EmojiWithText letter="a" />.
                      </P>
                      <P>
                        Let‚Äôs{' '}
                        <H args={{ name: 'fastForward', lowerCase: true }} /> it
                        to check!
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              <H args={{ name: 'pressFastForward', mentionRightArrow: true }} />
            </P>
            <R.Thkn />
            <BubbleQuotes
              quotes={[
                {
                  type: 'happy',
                  children: (
                    <>
                      <P>
                        „ÇÑ„Å£„ÅüÔºÅÊúÄÂæå„Å´
                        <EmojiWithText letter="a" />
                        „Åß„ÅØ„Å™„Åè
                        <EmojiWithText letter="d" />
                        „ÅåÊÆã„Å£„Åü„ÅÆ„Åß„ÄÅ<Emoji>‚ùå</Emoji> „ÅåÊ≠£Ëß£„Å†ÔºÅSo{' '}
                        <H
                          args={{
                            name: 'theAnswerIs',
                            isYes: false,
                            lowerCase: true
                          }}
                        />
                        !
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        type: 'sideNote',
        title: (
          <>
            Ë£úË∂≥: Â∑¶Á´Ø„Å´ <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
            „ÅÆ„Éö„Ç¢„Åå„Å™„ÅÑÂ†¥Âêà
          </>
        ),
        content: (
          <>
            <P>
              „Åì„Åì„ÅßË£úË∂≥„Åß„Åô„ÄÇ„Åæ„Åö„ÄÅ‰∏ã„ÅÆÂºÅÂΩìÁÆ±„Çí„ÅîË¶ß„Åè„Å†„Åï„ÅÑ„ÄÇÂÖà„Åª„Å©„ÅÆ{' '}
              <H args={{ name: 'yesNoQuiz' }} />
              „ÅßÁôªÂ†¥„Åó„ÅüÂºÅÂΩìÁÆ±„Å®„Åª„Å®„Çì„Å©Âêå„Åò„Åß„Åô„Åå„ÄÅ
              <Highlight>
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
                „ÅÆ„Éö„Ç¢„ÅåÂºÅÂΩìÁÆ±„ÅÆÂ∑¶Á´Ø„Å´„Å™„Åè„ÄÅÂÜÖÂÅ¥„Å†„Åë„Å´„ÅÇ„Çä„Åæ„Åô„ÄÇ
              </Highlight>
            </P>
            <R.Dhzf>
              <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
              „ÅÆ„Éö„Ç¢„ÅåÂºÅÂΩìÁÆ±„ÅÆÂ∑¶Á´Ø„Å´„Å™„Åè„ÄÅ
              <br />
              ÂÜÖÂÅ¥„Å†„Åë„Å´„ÅÇ„Çã
            </R.Dhzf>
            <P>
              „Åì„ÅÆ„Çà„ÅÜ„Å™Â†¥Âêà„ÄÅ
              <Highlight>
                ÂÜÖÂÅ¥„ÅÆ <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
                „ÅÆ„Éö„Ç¢„ÅÆÈÉ®ÂàÜ„Åã„Çâ„ÅØ„Åò„ÇÅ„Åæ„Åô„ÄÇ
              </Highlight>
            </P>
            <R.Mhyv>
              ÂÜÖÂÅ¥„ÅÆ <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
              „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çã
            </R.Mhyv>
            <P>
              ÊÆã„Çä„ÅØ
              <H args={{ name: 'fastForward' }} /> „ÅßË¶ã„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ
              <H args={{ name: 'pressFastForward' }} />
            </P>
            <R.Ayok />
            <P>
              „Åæ„Å®„ÇÅ„Çã„Å®„ÄÅ
              <Highlight>
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
                „ÅÆ„Éö„Ç¢„ÅåÂºÅÂΩìÁÆ±„ÅÆÂ∑¶Á´Ø„Å´„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÂÜÖÂÅ¥„ÅÆ{' '}
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
                „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çå„Å∞„ÅÑ„ÅÑ
              </Highlight>
              „ÅÆ„Åß„Åô„ÄÇ
            </P>
          </>
        )
      },
      {
        title: (
          <>
            Á¥∞„Åã„ÅÑÊ≥ïÂâá„Åù„ÅÆ2: <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
            „ÅÆ„Éö„Ç¢„ÅÆ„Åã„Çâ„ÅØ„Åò„ÇÅ„Çâ„Çå„Å™„ÅÑÂ†¥Âêà„ÄÅ
            <InlinePrioritiesLabel>2</InlinePrioritiesLabel> „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çã
          </>
        ),
        content: (
          <>
            <P>
              Á∂ö„ÅÑ„Å¶„ÄÅ„Åì„Å°„Çâ„ÅÆ
              <H args={{ name: 'bentoBoxPuzzle' }} />
              „Çí„ÅîË¶ß„Åè„Å†„Åï„ÅÑ„ÄÇ
            </P>
            <R.Gtdu>
              ‰∏ÄÁï™‰∏ã„ÅÆÊñôÁêÜ„Åå
              <EmojiWithText letter="b" /> „Å≤„Å®„Å§„Å†„Åë
            </R.Gtdu>
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        „Åì„ÅÆÂºÅÂΩìÁÆ±„ÅØ„ÄÅ
                        <HighlightBold>
                          ‰∏ÄÁï™‰∏ã„ÅÆÊÆµ„ÅÆÊñôÁêÜ„Åå
                          <EmojiWithText letter="b" /> „Å†„Åë
                        </HighlightBold>
                        „Å™„ÅÆ„Å´Ê≥®ÁõÆ„Å†„ÄÇ
                      </P>
                    </>
                  )
                },
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        „Åü„Åó„Åã„Å´‚Ä¶‰ªÆ„Å´{' '}
                        <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
                        „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çã„Å®„Åó„Åü„Çâ„ÄÅ
                      </P>
                      <P>
                        „Åì„ÅÆ
                        <EmojiWithText letter="b" />
                        „Å´„ÅØ„ÄÅ
                        <HighlightBold>
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcArg"
                          />{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcBound"
                          />{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcUnbound"
                          />{' '}
                          „ÅÆ„ÅÜ„Å°„ÄÅ„Å©„ÅÆÂç∞„Çí„Å§„Åë„Çå„Å∞„ÅÑ„ÅÑ„ÅÆ„Å†„Çç„ÅÜÔºü
                        </HighlightBold>
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Jmmp>
              <EmojiWithText letter="b" /> „Å´„ÅØ„ÄÅ
              <br />
              <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />{' '}
              „ÅÆ„ÅÜ„Å°„Å©„ÅÆÂç∞„Çí„Å§„Åë„Çå„Å∞„ÅÑ„ÅÑÔºü
            </R.Jmmp>
            <P>
              Á≠î„Åà„ÅØ„ÄÅ„Äå
              <HighlightBold>„Å©„ÅÆÂç∞„ÇÇ„Å§„Åë„Çã„Åì„Å®„Åå„Åß„Åç„Å™„ÅÑ</HighlightBold>
              „Äç„Åß„Åô„ÄÇ
              <Highlight>
                ‰∏ÄÁï™‰∏ã„ÅÆÊÆµ„Å´„Å≤„Å®„Å§„Åó„ÅãÊñôÁêÜ„Åå„Å™„ÅÑÂ†¥Âêà„ÄÅ„Å©„ÅÆÂç∞„Çí„Å§„Åë„Çã„Åì„Å®„ÇÇ„Åß„Åç„Å™„ÅÑ„ÅÆ„Åß„Åô
              </Highlight>
              „ÄÇ
            </P>
            <EmojiSeparator
              nodes={[
                <Emoji>‚ùå</Emoji>,
                <EmojiForLetter letter="b" />,
                <Emoji>‚ùå</Emoji>
              ]}
              description={
                <>
                  <EmojiWithText letter="b" /> „Å´„ÅØ„ÄÅ
                  <br />
                  <BottomRightBadge
                    inline
                    bottomRightBadgeType="funcArg"
                  />{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />{' '}
                  „ÅÆ„Å©„Çå„ÇÇ„Å§„Åë„Çâ„Çå„Å™„ÅÑ
                </>
              }
            />
            <P>
              „Å®„ÅÑ„ÅÜ„Åì„Å®„ÅØ„Å§„Åæ„Çä„ÄÅ
              <Highlight>
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
                „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çã„Åì„Å®„Åå„Åß„Åç„Å™„ÅÑ
              </Highlight>
              „ÄÅ„Å®„ÅÑ„ÅÜ„Åì„Å®„Å´„Å™„Çä„Åæ„Åô„ÄÇ
            </P>
            <EmojiSeparator
              nodes={[
                <Emoji>‚ùå</Emoji>,
                <InlinePrioritiesLabel>1</InlinePrioritiesLabel>,
                <Emoji>‚ùå</Emoji>
              ]}
              description={
                <>
                  <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
                  „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çâ„Çå„Å™„ÅÑ
                </>
              }
            />
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>„Åò„ÇÉ„ÅÇ„ÄÅ„Å©„ÅÜ„Åô„Çå„Å∞„ÅÑ„ÅÑ„Çì„Å†Ôºü</P>
                    </>
                  )
                }
              ]}
            />
            <P>
              <Bold>Á≠î„Åà:</Bold> ‰∏äË®ò„ÅÆ„Çà„ÅÜ„Å´{' '}
              <InlinePrioritiesLabel>1</InlinePrioritiesLabel>{' '}
              „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çâ„Çå„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ
              <HighlightBold>
                <InlinePrioritiesLabel>2</InlinePrioritiesLabel>{' '}
                „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Åæ„Åô„ÄÇ
              </HighlightBold>
            </P>
            <R.Dqey>
              <InlinePrioritiesLabel>2</InlinePrioritiesLabel>{' '}
              „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çã
            </R.Dqey>
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        „Å™„Çã„Åª„Å©„ÄÅ
                        <InlinePrioritiesLabel>2</InlinePrioritiesLabel>{' '}
                        „ÅÆ„Éö„Ç¢„Åã„Çâ„ÅØ„Åò„ÇÅ„Çå„Å∞„ÄÅ
                        <Highlight>
                          ‰∏ã„ÅÆÊÆµ„Å´
                          <EmojiWithText letter="a" />
                          „Åå„Åµ„Åü„Å§„ÅÇ„Çã„Åã„Çâ„ÄÅ
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcArg"
                          />{' '}
                          „Å®{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcBound"
                          />{' '}
                          „ÅÆÂç∞„Çí„Å§„Åë„Çâ„Çå„Çã„Å≠„ÄÇ
                        </Highlight>
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        „Åù„ÅÆÈÄö„Çä„ÄÇ
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="callArg"
                        />{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcArg"
                        />{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcBound"
                        />
                        „ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„Å´„Å™„Çã„Åû„ÄÇ
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Oork>
              <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
              „ÅØ„Åì„ÅÜ„Å™„Çã
            </R.Oork>
            <P>
              ÊÆã„Çä„ÅØ
              <H args={{ name: 'fastForward' }} /> „ÅßË¶ã„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ:
            </P>
            <R.Diis />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        ÊúÄÁµÇÁöÑ„Å´
                        <EmojiWithText letter="c" />„Å®
                        <EmojiWithText letter="b" />
                        „ÅåÊÆã„Å£„ÅüÔºÅ
                      </P>
                      <P>
                        <Highlight>
                          „Åì„ÅÆ„Åµ„Åü„Å§„ÅåÊÆã„Å£„ÅüÊôÇÁÇπ„Åß„ÄÅ„ÇÇ„ÅÜ„Åì„Çå‰ª•‰∏äÈÄ≤„ÇÅ„Çâ„Çå„Å™„ÅÑ„Åã„Çâ„ÄÅ„Åù„Åì„ÅßÁµÇ‰∫Ü„Åô„Çã
                        </Highlight>
                        „Å®„ÅÑ„ÅÜ„Çè„Åë„Åã„ÄÇ
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        „Åù„ÅÆÈÄö„Çä„Å†„ÄÇ„Åß„ÅØ„ÄÅ„Åì„Åì„Åß{' '}
                        <H args={{ name: 'yesNoQuiz' }} />
                        „ÅÆÊôÇÈñì„Å†„ÄÇ
                      </P>
                      <P>
                        <Highlight>
                          „Åì„Çå„ÅåÂàùÁ¥öÊúÄÂæå„ÅÆ <H args={{ name: 'yesNoQuiz' }} />
                          „Å´„Å™„Çã„ÅûÔºÅ
                        </Highlight>
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        type: 'yesNoQuiz',
        title: (
          <>
            <H args={{ name: 'yesNoQuiz' }} />
          </>
        ),
        content: (
          <>
            <P>
              <H args={{ name: 'lookAtThisBentoBox' }} />:
            </P>
            <R.Fclo />
            <P>
              <H args={{ name: 'whatHappensAtTheEndQuestion' }} />
            </P>
            <R.Rgta />
            <YesNoButtons answer="yes" />
          </>
        )
      },
      {
        title: (
          <>
            <H args={{ name: 'theAnswerIs', isYes: true }} />
          </>
        ),
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        <H
                          args={{
                            name: 'theAnswerIs',
                            isYes: true,
                            sentence: true
                          }}
                        />
                        . I think we should be left with{' '}
                        <EmojiWithText letter="d" /> and a{' '}
                        <EmojiWithText letter="b" />.
                      </P>
                      <P>
                        Let‚Äôs{' '}
                        <H args={{ name: 'fastForward', lowerCase: true }} /> it
                        to check!
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              <H args={{ name: 'pressFastForward', mentionRightArrow: true }} />
            </P>
            <R.Cuwg />
            <BubbleQuotes
              quotes={[
                {
                  type: 'happy',
                  children: (
                    <>
                      <P>
                        We‚Äôre left with <EmojiWithText letter="d" /> and a{' '}
                        <EmojiWithText letter="b" />. So{' '}
                        <H
                          args={{
                            name: 'theAnswerIs',
                            isYes: true,
                            lowerCase: true
                          }}
                        />
                        !
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        type: 'summary',
        title: (
          <>
            <H args={{ name: 'summary' }} />
          </>
        ),
        content: (
          <>
            <ThreeRowRules />
            <Hr />
            <Beginner5Rules />
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>„Åì„Çå„Çâ„ÅÆÊ≥ïÂâá„ÇíË¶ö„Åà„Åç„Çå„Çã„Åã„ÄÅ‰∏çÂÆâ„Å†„Å™„ÅÇ‚Ä¶</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <HighlightBold>
                          ÂÆâÂøÉ„Åó„Çç„ÄÅ„Åì„Çå„Çâ„ÅÆÊ≥ïÂâá„ÇíÊöóË®ò„Åô„ÇãÂøÖË¶Å„ÅØ„Å™„ÅÑ„ÄÇ
                        </HighlightBold>
                        „Å™„Çì„Å®„Å™„Åè„Äå
                        <Highlight>„Åì„ÅÜ„ÅÑ„ÅÜÊ≥ïÂâá„Åå„ÅÇ„Çã„Çì„Å†„Å™</Highlight>
                        „Äç„Å®È†≠„Å´ÂÖ•„Çå„Å¶„Åä„Åë„Å∞Â§ß‰∏àÂ§´„Å†„ÄÇ
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: <>ÂàùÁ¥ö„ÅØ„Åì„Åì„Åæ„ÅßÔºÅ</>,
        content: (
          <>
            <EmojiSeparator emojis={['üéâ', 'ü§ó', 'üéâ']} />
            <BubbleQuotes
              quotes={[
                {
                  type: 'celebrate',
                  children: (
                    <>
                      <P>
                        „Å©„ÅÜ„Å†„ÄÅ
                        <H args={{ name: 'yesNoQuiz' }} />
                        „Çí„Åô„Åπ„Å¶Ëß£„ÅÑ„Åü„ÅûÔºÅ
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        „ÇÑ„Çã„Åò„ÇÉ„Å™„ÅÑ„Åã„ÄÇ
                        <Highlight>
                          „Å®„ÅÑ„ÅÜ„Çè„Åë„Åß„ÄÅÂàùÁ¥öÁ∑®„ÅØ„Åì„Åì„ÅßÁµÇ„Çè„Çä„Å†„ÄÇÊ¨°„Åã„Çâ„ÅØ‰∏≠Á¥öÁ∑®„Å´ÂÖ•„Çã„ÄÇ
                        </Highlight>
                      </P>
                      <P>
                        „Åï„Åç„Åª„Å©Á¥ÑÊùü„Åó„ÅüÈÄö„Çä„ÄÅ
                        <Highlight>
                          <HighlightBold>
                            Ê¨°„Åã„Çâ„ÅØ„Åò„Åæ„Çã‰∏≠Á¥öÁ∑®„Åß„ÄÅ„Å®„Å¶„ÇÇÈõ£„Åó„ÅÑÂïèÈ°å„ÇíÂá∫È°å„Åô„Çã„ÄÇ
                          </HighlightBold>
                          „Åì„ÅÆ„Éö„Éº„Ç∏„ÅßÁ¥π‰ªã„Åó„ÅüÊ≥ïÂâá„ÇíÂøúÁî®„Åô„Çå„Å∞Ëß£„Åë„ÇãÂïèÈ°å„Å†„ÄÇ„Åù„Çå„Å´Á≠î„Åà„Çã„Åì„Å®„Åå„Åß„Åç„Åü„Çâ„ÄÅË®àÁÆóÁÆ±„ÇíËøî„Åó„Å¶„ÇÑ„Çç„ÅÜÔºÅ
                        </Highlight>
                      </P>
                    </>
                  )
                }
              ]}
            />
            <WillReturn />
            <BubbleQuotes
              quotes={[
                {
                  type: 'brave',
                  children: (
                    <>
                      <P>
                        „Åù„ÅÆÈõ£„Åó„ÅÑÂïèÈ°å„Å®„ÇÑ„Çâ„ÇíËß£„Åë„Å∞„ÄÅÊú¨ÂΩì„Å´Ë®àÁÆóÁÆ±„ÇíËøî„Åó„Å¶„ÇÇ„Çâ„Åà„Çã„ÅÆ„ÅãÔºü
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>„ÅÇ„ÅÇ„ÄÅÊÇ™È≠î„Å´‰∫åË®Ä„ÅØ„Å™„ÅÑ„Åã„Çâ„Å™„ÄÇ</P>
                    </>
                  )
                },
                {
                  type: 'brave',
                  children: (
                    <>
                      <P>„Çà„Éº„Åó„ÄÅ„ÇÑ„Å£„Å¶„ÇÑ„Çã„ÅûÔºÅ‰∏≠Á¥öÁ∑®„Å´ÈÄ≤„ÇÇ„ÅÜÔºÅ</P>
                    </>
                  )
                }
              ]}
            />
            <NextLessonButton />
          </>
        )
      }
    ]}
  />
)
