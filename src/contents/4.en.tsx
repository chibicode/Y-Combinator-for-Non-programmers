import React from 'react'
import EpisodeCardList from 'src/components/EpisodeCardList'
import {
  P,
  HighlightBold,
  Highlight,
  Hr,
  Bold,
  Italic,
  Ul,
  UlLi
} from 'src/components/ContentTags'
import BottomRightBadge from 'src/components/BottomRightBadge'
import TopLeftBadgeWrapper from 'src/components/TopLeftBadgeWrapper'
import BubbleQuotes from 'src/components/BubbleQuotes'
import EmojiSeparator from 'src/components/EmojiSeparator'
import Emoji from 'src/components/Emoji'
import EmojiWithText from 'src/components/EmojiWithText'
import EmojiForLetter from 'src/components/EmojiForLetter'
import * as R from 'src/components/Runners'
import ExpressionRunnerSeparator from 'src/components/ExpressionRunnerSeparator'
import H from 'src/components/H'
import NextLessonButton from 'src/components/NextLessonButton'

export const BasicRules = ({
  includeFuncUnbound
}: {
  includeFuncUnbound?: boolean
}) => (
  <>
    <P>
      1. <Bold>Label:</Bold>{' '}
      <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
      <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
      {includeFuncUnbound && (
        <>
          <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />{' '}
        </>
      )}
      <BottomRightBadge inline bottomRightBadgeType="funcBound" />
    </P>
    <R.Zzxj>
      <Bold>Label:</Bold>{' '}
      <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
      <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
      {includeFuncUnbound && (
        <>
          <BottomRightBadge inline bottomRightBadgeType="funcUnbound" />{' '}
        </>
      )}
      <BottomRightBadge inline bottomRightBadgeType="funcBound" />
    </R.Zzxj>
    <P>
      2. <Bold>Match:</Bold>{' '}
      <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
      <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
      <Emoji>‚úÖ</Emoji>
    </P>
    <R.Keck>
      <Bold>Match:</Bold>{' '}
      <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
      <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
      <Emoji>‚úÖ</Emoji>
    </R.Keck>
    <P>
      3. <Bold>Copy:</Bold>{' '}
      <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
      <Emoji>‚ÜòÔ∏è</Emoji>{' '}
      <TopLeftBadgeWrapper topLeftBadgeType="match">
        <BottomRightBadge inline bottomRightBadgeType="funcBound" />
      </TopLeftBadgeWrapper>
    </P>
    <R.Qoms>
      <Bold>Copy:</Bold>{' '}
      <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
      <Emoji>‚ÜòÔ∏è</Emoji>{' '}
      <TopLeftBadgeWrapper topLeftBadgeType="match">
        <BottomRightBadge inline bottomRightBadgeType="funcBound" />
      </TopLeftBadgeWrapper>
    </R.Qoms>
    <P>
      4. <Bold>Remove:</Bold> <Emoji>üí•</Emoji>{' '}
      <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
      <BottomRightBadge inline bottomRightBadgeType="funcArg" />
    </P>
    <R.Mhgm>
      <Bold>Remove:</Bold> <Emoji>üí•</Emoji>{' '}
      <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
      <BottomRightBadge inline bottomRightBadgeType="funcArg" />
    </R.Mhgm>
    <ExpressionRunnerSeparator />
    <R.Osqo />
  </>
)

export const Unmatched = () => (
  <>
    <P>
      If none of <BottomRightBadge inline bottomRightBadgeType="funcArg" />
      ‚Äôs and <BottomRightBadge inline bottomRightBadgeType="funcBound" />
      ‚Äôs match,{' '}
      <HighlightBold>
        don‚Äôt do the copy step and simply remove{' '}
        <BottomRightBadge inline bottomRightBadgeType="callArg" />
        ‚Äôs and <BottomRightBadge inline bottomRightBadgeType="funcArg" />
        ‚Äôs
      </HighlightBold>
      .
    </P>
    <R.Jwzh>
      If none of <BottomRightBadge inline bottomRightBadgeType="funcArg" />
      ‚Äôs and <BottomRightBadge inline bottomRightBadgeType="funcBound" />
      ‚Äôs match‚Ä¶
    </R.Jwzh>
    <ExpressionRunnerSeparator />
    <R.Knhw>
      Simply remove <BottomRightBadge inline bottomRightBadgeType="callArg" />
      ‚Äôs and <BottomRightBadge inline bottomRightBadgeType="funcArg" />
      ‚Äôs
    </R.Knhw>
  </>
)

export default () => (
  <EpisodeCardList
    underConstruction
    cards={[
      {
        title: <>Success?</>,
        content: (
          <>
            <EmojiSeparator
              emojis={['üç±', 'üòÅ', 'üç±']}
              description={<>I‚Äôve figured it out!</>}
            />
            <P>
              Looks like the villagers have figured out the patterns for{' '}
              <H args={{ name: 'bentoBoxPuzzle' }} />!
            </P>
            <BubbleQuotes
              quotes={[
                {
                  type: 'happy',
                  children: (
                    <>
                      <P>I think I‚Äôve figured out how lunchboxes work!</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Really? Then explain to me!</P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: <>If the bottom two items are the same</>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'smile',
                  children: (
                    <>
                      <P>
                        Let me explain. First,{' '}
                        <Highlight>you compare the bottom two items</Highlight>.
                      </P>
                      <P>
                        <Highlight>
                          If the bottom two items are the <Italic>same</Italic>
                        </Highlight>
                        , then when you{' '}
                        <H args={{ name: 'play', lowerCase: true }} /> it,{' '}
                        <Highlight>
                          we‚Äôre left with the <Italic>top item</Italic>
                        </Highlight>{' '}
                        at the end.
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Vmkg>
              The bottom two items are the same
              <br />
              (Both <EmojiWithText letter="a" />)
            </R.Vmkg>
            <ExpressionRunnerSeparator />
            <R.Osqo>
              We‚Äôre left with the <EmojiWithText letter="b" />,<br />
              which was on the top
            </R.Osqo>
            <Hr />
            <R.Wtup>
              The bottom two items are the same
              <br />
              (Both <EmojiWithText letter="f" />)
            </R.Wtup>
            <ExpressionRunnerSeparator />
            <R.Weoz>
              We‚Äôre left with <EmojiWithText letter="g" /> and{' '}
              <EmojiWithText letter="o" />,<br />
              which were on the top
            </R.Weoz>
            <BubbleQuotes
              quotes={[
                {
                  type: 'smile',
                  children: (
                    <>
                      <P>
                        So this is the solution for the first{' '}
                        <H args={{ name: 'yesNoQuiz' }} />:
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Dogu>
              The bottom two items are the same
              <br />
              (Both <EmojiWithText letter="k" />)
            </R.Dogu>
            <ExpressionRunnerSeparator />
            <R.Vvjn>
              We‚Äôre left with the <EmojiWithText letter="l" />,<br />
              which was on the top
            </R.Vvjn>
          </>
        )
      },
      {
        title: <>If the bottom two items are different</>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'smile',
                  children: (
                    <>
                      <P>
                        Now, let‚Äôs talk about the case where{' '}
                        <Highlight>
                          the bottom two items are different
                        </Highlight>
                        .
                      </P>
                      <P>
                        In this case, when you{' '}
                        <H args={{ name: 'play', lowerCase: true }} /> it,{' '}
                        <Highlight>
                          we‚Äôre left with the <Italic>bottom right item</Italic>
                        </Highlight>{' '}
                        at the end.
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Nplf>
              The bottom two items are different
              <br />
              (<EmojiForLetter letter="c" /> and <EmojiForLetter letter="d" />)
            </R.Nplf>
            <ExpressionRunnerSeparator />
            <R.Bgfl>
              We‚Äôre left with the <EmojiWithText letter="d" />,<br />
              which was in the bottom right
            </R.Bgfl>
            <Hr />
            <R.Immq>
              The bottom two items are different (<EmojiForLetter letter="h" />{' '}
              and <EmojiForLetter letter="i" />)
            </R.Immq>
            <ExpressionRunnerSeparator />
            <R.Cpkp>
              We‚Äôre left with the <EmojiWithText letter="i" />,<br />
              which was in the bottom right
            </R.Cpkp>
            <BubbleQuotes
              quotes={[
                {
                  type: 'smile',
                  children: (
                    <>
                      <P>
                        So this is the solution for the second{' '}
                        <H args={{ name: 'yesNoQuiz' }} />:
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Cowm>
              The bottom two items are different (<EmojiForLetter letter="k" />{' '}
              and <EmojiForLetter letter="m" />)
            </R.Cowm>
            <ExpressionRunnerSeparator />
            <R.Ozxi>
              We‚Äôre left with the <EmojiWithText letter="m" />,<br />
              which was in the bottom right
            </R.Ozxi>
            <BubbleQuotes
              quotes={[
                {
                  type: 'happy',
                  children: (
                    <>
                      <P>This has to be the solution! Am I correct?</P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: <>Correct!</>,
        content: (
          <>
            <EmojiSeparator
              emojis={['üéâ', 'üòà', 'üéâ']}
              description={<>Exactly right!</>}
            />
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Italic>You‚Äôre exactly right!</Italic> Good job!{' '}
                        <Emoji>üéâ</Emoji> <Emoji>üéâ</Emoji> <Emoji>üéâ</Emoji>
                      </P>
                      <P>
                        I thought you‚Äôll do much worse on these quizzes because
                        you haven‚Äôt been studying math seriously. Not too bad!
                      </P>
                    </>
                  )
                },
                {
                  type: 'celebrate',
                  children: (
                    <>
                      <P>Yay!</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Italic>However, don‚Äôt celebrate just yet.</Italic>
                      </P>
                    </>
                  )
                },
                {
                  type: 'scared',
                  children: (
                    <>
                      <P>Huh? Why?</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        Before going to the next page, we still need to{' '}
                        <Bold>formalize</Bold> the rules of{' '}
                        <H args={{ name: 'bentoBoxPuzzle' }} />.
                      </P>
                    </>
                  )
                },
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        <Bold>Formalize?</Bold> What do you mean?
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: <>Formalize the rules</>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Bold>Here‚Äôs what you stated:</Bold>
                      </P>
                      <Ul>
                        <UlLi>Compare the bottom two items.</UlLi>
                        <UlLi>If they‚Äôre the same, the top item remains.</UlLi>
                        <UlLi>Otherwise, the bottom right item remains.</UlLi>
                      </Ul>
                      <P>
                        This is <Italic>not wrong</Italic>, but also is{' '}
                        <Italic>not detailed enough</Italic> to solve more
                        difficult puzzles.
                      </P>
                    </>
                  )
                },
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>Hmm‚Ä¶ okay‚Ä¶</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        In order to solve more complex puzzles, we need to{' '}
                        <Italic>formalize</Italic> the rules. We must be more{' '}
                        <Italic>detailed</Italic>.
                      </P>
                    </>
                  )
                }
              ]}
            />
            <EmojiSeparator
              emojis={['‚úÖ', 'üç±', '‚úÖ']}
              description={
                <>
                  We have to <Italic>formalize</Italic> the rules.
                  <br />
                  We must be more <Italic>detailed</Italic>.
                </>
              }
            />
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Bold>So:</Bold> I‚Äôll explain to you the{' '}
                        <Italic>formal</Italic>, more detailed rules of{' '}
                        <H args={{ name: 'bentoBoxPuzzle' }} />.
                      </P>
                      <P>
                        Once you understand it, I‚Äôll give you more complex
                        puzzles to solve.
                      </P>
                    </>
                  )
                },
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        Okay‚Ä¶ could you show me what that{' '}
                        <Italic>formal rules</Italic> looks like?
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            The formal rules of <H args={{ name: 'bentoBoxPuzzle' }} />
          </>
        ),
        type: 'summary',
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        Here are the formal rules of{' '}
                        <H args={{ name: 'bentoBoxPuzzle' }} />. There are{' '}
                        <Italic>four steps</Italic>:
                      </P>
                    </>
                  )
                }
              ]}
            />
            <BasicRules />
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>Now, let‚Äôs talk about each step!</P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            1. Label <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcBound" />
          </>
        ),
        content: (
          <>
            <P>We‚Äôll use this lunchbox to explain each step:</P>
            <R.Ilpo />
            <P>
              First,{' '}
              <Highlight>
                we <Bold>label</Bold>
              </Highlight>
              :
            </P>
            <Ul>
              <UlLi>
                <Highlight>
                  The <Bold>top</Bold> items as{' '}
                  <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
                  (for ‚Äú<Bold>T</Bold>op‚Äù)
                </Highlight>
              </UlLi>
              <UlLi>
                <Highlight>
                  The <Bold>left</Bold> items as{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
                  (for ‚Äú<Bold>L</Bold>eft‚Äù)
                </Highlight>
              </UlLi>
              <UlLi>
                <Highlight>
                  The <Bold>right</Bold> items as{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
                  (for ‚Äú<Bold>R</Bold>ight‚Äù)
                </Highlight>
              </UlLi>
            </Ul>
            <EmojiSeparator
              nodes={[
                <BottomRightBadge inline bottomRightBadgeType="callArg" />,
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />,
                <BottomRightBadge inline bottomRightBadgeType="funcBound" />
              ]}
              description={
                <>
                  Label items as{' '}
                  <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
                </>
              }
            />
            <P>
              Let‚Äôs see it in action. <H args={{ name: 'pressNext' }} />
            </P>
            <R.Ozbe />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        The <EmojiWithText letter="b" /> is labeled as{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="callArg"
                        />
                        , and <EmojiWithText letter="a" /> on the bottom are
                        labeled as{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcArg"
                        />{' '}
                        and{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcBound"
                        />
                        !
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            2. Match <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
            <Emoji>‚úÖ</Emoji>
          </>
        ),
        content: (
          <>
            <P>
              Second,{' '}
              <Highlight>
                we check to see if some of{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />
                ‚Äôs and{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcBound" />
                ‚Äôs <Bold>match</Bold>.{' '}
                <Italic>
                  If they match, add the <Emoji>‚úÖ</Emoji> sign.
                </Italic>
              </Highlight>
            </P>
            <EmojiSeparator
              nodes={[
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />,
                <BottomRightBadge inline bottomRightBadgeType="funcBound" />,
                <Emoji>‚úÖ</Emoji>
              ]}
              description={
                <>
                  If some of{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcArg" />
                  ‚Äôs and{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcBound" />
                  ‚Äôs match, add <Emoji>‚úÖ</Emoji>
                </>
              }
            />
            <P>
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Rqjo />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        The <EmojiWithText letter="a" /> labeled as{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcArg"
                        />{' '}
                        and{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcBound"
                        />{' '}
                        now have a <Emoji>‚úÖ</Emoji> sign!
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            3. <Bold>Copy:</Bold>{' '}
            <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
            <Emoji>‚ÜòÔ∏è</Emoji>{' '}
            <TopLeftBadgeWrapper topLeftBadgeType="match">
              <BottomRightBadge inline bottomRightBadgeType="funcBound" />
            </TopLeftBadgeWrapper>
          </>
        ),
        content: (
          <>
            <P>
              Third,{' '}
              <Highlight>
                we <Bold>copy</Bold>{' '}
                <BottomRightBadge inline bottomRightBadgeType="callArg" />
                ‚Äôs to where the <Italic>matched</Italic>{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcBound" />
                ‚Äôs are.
              </Highlight>
            </P>
            <EmojiSeparator
              nodes={[
                <BottomRightBadge inline bottomRightBadgeType="callArg" />,
                <Emoji>‚ÜòÔ∏è</Emoji>,
                <TopLeftBadgeWrapper topLeftBadgeType="match">
                  <BottomRightBadge inline bottomRightBadgeType="funcBound" />
                </TopLeftBadgeWrapper>
              ]}
              description={
                <>
                  Copy{' '}
                  <BottomRightBadge inline bottomRightBadgeType="callArg" />
                  ‚Äôs to <Italic>matched</Italic>{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcBound" />
                  ‚Äôs
                </>
              }
            />
            <P>
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Evqx />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        The <EmojiWithText letter="b" /> (labeled as{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="callArg"
                        />
                        ) is copied to where the matched{' '}
                        <TopLeftBadgeWrapper topLeftBadgeType="match">
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcBound"
                          />
                        </TopLeftBadgeWrapper>{' '}
                        is!
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: (
          <>
            4. <Bold>Remove:</Bold> <Emoji>üí•</Emoji>{' '}
            <BottomRightBadge inline bottomRightBadgeType="callArg" />{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcArg" />
          </>
        ),
        content: (
          <>
            <P>
              Finally,{' '}
              <Highlight>
                we <Bold>remove</Bold>{' '}
                <BottomRightBadge inline bottomRightBadgeType="callArg" />
                ‚Äôs and{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />
                ‚Äôs
              </Highlight>
              .
            </P>
            <EmojiSeparator
              nodes={[
                <Emoji>üí•</Emoji>,
                <BottomRightBadge inline bottomRightBadgeType="callArg" />,
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />
              ]}
              description={
                <>
                  Remove{' '}
                  <BottomRightBadge inline bottomRightBadgeType="callArg" />
                  ‚Äôs and{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcArg" />
                  ‚Äôs.
                </>
              }
            />
            <P>
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Msiw />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="callArg"
                        />
                        ‚Äôs and{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcArg"
                        />
                        ‚Äôs have turned into <Emoji>üí•</Emoji>!
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              After removing these, we‚Äôre left with just the{' '}
              <EmojiWithText letter="b" />.
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Kbnn />
            <P>That‚Äôs it!</P>
          </>
        )
      },
      {
        title: <>What if there are more than one items on the top?</>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        <Bold>Question:</Bold> What happens if there are{' '}
                        <Italic>more than one items on the top</Italic>, like
                        the example below?
                      </P>
                    </>
                  )
                }
              ]}
            />
            <R.Rakk>
              There are two items on the top
              <br />(<EmojiWithText letter="g" /> and{' '}
              <EmojiWithText letter="o" />)
            </R.Rakk>
            <P>
              <Bold>Answer:</Bold> In this case,{' '}
              <Highlight>
                both <EmojiWithText letter="g" /> and{' '}
                <EmojiWithText letter="o" /> will be labeled as{' '}
                <BottomRightBadge inline bottomRightBadgeType="callArg" />
              </Highlight>{' '}
              (for ‚Äú<Bold>T</Bold>op‚Äù).
            </P>
            <R.Ycxr>
              Both labeled as{' '}
              <BottomRightBadge inline bottomRightBadgeType="callArg" />
            </R.Ycxr>
            <P>
              Then, the <EmojiWithText letter="f" postfix="s" /> match{' '}
              <Emoji>‚úÖ</Emoji>‚Ä¶
            </P>
            <R.Dkdt />
            <P>
              And therefore, both <EmojiWithText letter="g" /> and
              <EmojiWithText letter="o" /> get copied to where the matched{' '}
              <TopLeftBadgeWrapper topLeftBadgeType="match">
                <BottomRightBadge inline bottomRightBadgeType="funcBound" />
              </TopLeftBadgeWrapper>{' '}
              is.
            </P>
            <R.Sxnt />
            <P>
              Finally,{' '}
              <BottomRightBadge inline bottomRightBadgeType="callArg" />
              ‚Äôs and <BottomRightBadge inline bottomRightBadgeType="funcArg" />
              ‚Äôs disappear‚Ä¶
            </P>
            <R.Issq />
            <P>
              And we‚Äôre left with <EmojiWithText letter="g" /> and{' '}
              <EmojiWithText letter="o" />.
            </P>
            <R.Thbw />
          </>
        )
      },
      {
        title: (
          <>
            <H args={{ name: 'fastForward' }} /> „ÅßË¶ã„Å¶„Åø„Åæ„Åó„Çá„ÅÜ
          </>
        ),
        content: (
          <>
            <P>
              „Åß„ÅØ„ÄÅÊúÄÂàù„Åã„ÇâÊúÄÂæå„Åæ„Åß
              <H args={{ name: 'fastForward' }} /> „ÅßË¶ã„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ
              <H args={{ name: 'fastForward' }} /> Ê©üËÉΩ„Çí‰Ωø„ÅÜ„Å®„ÄÅ
              <Highlight>ÂêÑ„Çπ„ÉÜ„ÉÉ„Éó„ÇíËá™Âãï„ÅßË¶ã„Å¶„ÅÑ„Åè„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ</Highlight>
            </P>
            <EmojiSeparator
              emojis={['‚è©', 'üç±', '‚è©']}
              description={<>Êó©ÈÄÅ„Çä„Åô„Çã„Å®„ÄÅÂêÑ„Çπ„ÉÜ„ÉÉ„Éó„ÅåËá™Âãï„ÅßË¶ã„Çå„Çã</>}
            />
            <P>
              „Åì„Å°„Çâ„ÅØ„ÄÅ‰∏ä„Å´„Å≤„Å®„Å§„ÅÆÊñôÁêÜ„Åå„ÅÇ„Çã‰æã„Åß„Åô„ÄÇ
              <H args={{ name: 'pressFastForward', mentionRightArrow: true }} />
            </P>
            <R.Wunw />
            <P>
              „Åì„Å°„Çâ„ÅØ„ÄÅ‰∏ä„Å´„Åµ„Åü„Å§„ÅÆÊñôÁêÜ„Åå„ÅÇ„Çã‰æã„Åß„Åô„ÄÇ
              <H args={{ name: 'pressFastForward' }} />
            </P>
            <R.Hluq />
          </>
        )
      },
      {
        type: 'summary',
        title: (
          <>
            <H args={{ name: 'summary' }} />
          </>
        ),
        content: (
          <>
            <P>„Å®„ÅÑ„ÅÜ„Çè„Åë„Åß„ÄÅ„Åì„Åì„Åæ„Åß„Çí„Åæ„Å®„ÇÅ„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ</P>
            <BasicRules />
            <BubbleQuotes
              quotes={[
                {
                  type: 'surprised',
                  children: (
                    <>
                      <P>„Å™„Çã„Åª„Å©„ÄÅ„Åù„ÅÜ„ÅÑ„ÅÜ‰ªïÁµÑ„Åø„Å´„Å™„Å£„Å¶„ÅÑ„Åü„ÅÆ„ÅãÔºÅ</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        „ÅÜ„ÇÄ„ÄÇ„Åù„Åó„Å¶„ÄÅ
                        <Highlight>
                          „Åì„ÅÜ„ÇÑ„Å£„Å¶„É´„Éº„É´„ÇíÊòéÁ¢∫„Å´„Åô„Çå„Å∞„ÄÅ„Éë„Ç∫„É´„ÅåË§áÈõë„Å´„Å™„Å£„Å¶„ÇÇÂøúÁî®„ÅåÂäπ„Åè
                        </Highlight>
                        „Çì„Å†„ÄÇ
                      </P>
                    </>
                  )
                }
              ]}
            />
          </>
        )
      },
      {
        title: <>‰∏ÄËá¥„Åó„Å™„Åã„Å£„Åü„ÇâÔºü</>,
        content: (
          <>
            <EmojiSeparator
              nodes={[
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />,
                <BottomRightBadge inline bottomRightBadgeType="funcBound" />,
                <Emoji>‚ùå</Emoji>
              ]}
              description={
                <>
                  <BottomRightBadge inline bottomRightBadgeType="funcArg" /> „Å®{' '}
                  <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
                  „Åå‰∏ÄËá¥„Åó„Å™„Åã„Å£„Åü„ÇâÔºü
                </>
              }
            />
            <BubbleQuotes
              quotes={[
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>
                        „Åß„ÅØ„ÄÅ
                        <HighlightBold>
                          „ÇÇ„Åó{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcArg"
                          />{' '}
                          „Å®{' '}
                          <BottomRightBadge
                            inline
                            bottomRightBadgeType="funcBound"
                          />{' '}
                          „Åå‰∏ÄËá¥„Åó„Å™„Åã„Å£„Åü„Çâ„Å©„ÅÜ„Åô„Çã„ÅÆÔºü
                        </HighlightBold>
                      </P>
                      <P>
                        „Åü„Å®„Åà„Å∞‰∏ã„ÅÆÂºÅÂΩìÁÆ±„ÅÆÂ†¥Âêà„ÅØ„ÄÅ
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcArg"
                        />{' '}
                        „Å®{' '}
                        <BottomRightBadge
                          inline
                          bottomRightBadgeType="funcBound"
                        />{' '}
                        „Åå‰∏ÄËá¥„Åó„Å™„ÅÑ„Çà„Å≠„ÄÇ
                      </P>
                    </>
                  )
                }
              ]}
            />
            <P>
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Sgfj />
          </>
        )
      },
      {
        title: (
          <>
            „Ç≥„Éî„Éº„ÅØ„Åõ„Åö„ÄÅ
            <BottomRightBadge inline bottomRightBadgeType="callArg" /> „Å®{' '}
            <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
            „ÇíÊ∂à„Åô„Å†„Åë
          </>
        ),
        content: (
          <>
            <P>
              <BottomRightBadge inline bottomRightBadgeType="funcArg" /> „Å®{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcBound" />{' '}
              „Åå‰∏ÄËá¥„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ
              <HighlightBold>
                „Ç≥„Éî„Éº„ÅØ„Åõ„Åö„Å´„ÄÅ„Åü„Å†{' '}
                <BottomRightBadge inline bottomRightBadgeType="callArg" /> „Å®{' '}
                <BottomRightBadge inline bottomRightBadgeType="funcArg" />{' '}
                „ÇíÊ∂à„Åô„Å†„Åë„Åß„Åô„ÄÇ
              </HighlightBold>
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Gwtp />
            <P>
              „Åù„Åó„Å¶„ÄÅÊúÄÁµÇÁöÑ„Å´
              <EmojiWithText letter="d" />
              „Å†„Åë„Å´„Å™„Çä„Åæ„Åô„ÄÇ
              <H args={{ name: 'pressNext' }} />
            </P>
            <R.Grla />
          </>
        )
      },
      {
        title: (
          <>
            <H args={{ name: 'fastForward' }} />
            „ÅßË¶ã„Å¶„Åø„Åæ„Åó„Çá„ÅÜ
          </>
        ),
        content: (
          <>
            <P>
              Âæ©Áøí„ÅÆ„Åü„ÇÅ„Å´„ÄÅ
              <BottomRightBadge inline bottomRightBadgeType="funcArg" /> „Å®{' '}
              <BottomRightBadge inline bottomRightBadgeType="funcBound" />
              „Åå‰∏ÄËá¥„Åó„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÇÇ„ÄÅÊúÄÂàù„Åã„ÇâÊúÄÂæå„Åæ„Åß
              <H args={{ name: 'fastForward' }} /> „ÅßË¶ã„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ
            </P>
            <EmojiSeparator
              emojis={['‚è©', 'üç±', '‚è©']}
              description={<>Êó©ÈÄÅ„Çä„ÅßÂæ©Áøí„Åó„Çà„ÅÜÔºÅ</>}
            />
            <P>
              „Åì„Å°„Çâ„ÅØ„ÄÅ‰∏ä„Å´„Å≤„Å®„Å§„ÅÆÊñôÁêÜ„Åå„ÅÇ„Çã‰æã„Åß„Åô„ÄÇ
              <H args={{ name: 'pressFastForward', mentionRightArrow: true }} />
            </P>
            <R.Jbam />
            <P>
              „Åì„Å°„Çâ„ÅØ„ÄÅ‰∏ä„Å´„Åµ„Åü„Å§„ÅÆÊñôÁêÜ„Åå„ÅÇ„Çã‰æã„Åß„Åô„ÄÇ
              <H args={{ name: 'pressFastForward' }} />
            </P>
            <R.Zuus />
          </>
        )
      },
      {
        title: (
          <>
            <H args={{ name: 'summary' }} />: ‰∏ÄËá¥„Åó„Å™„Åã„Å£„ÅüÂ†¥Âêà
          </>
        ),
        type: 'summary',
        content: (
          <>
            <Unmatched />
          </>
        )
      },
      {
        title: <>‰ª•‰∏ä„Åß„ÅôÔºÅ</>,
        content: (
          <>
            <BubbleQuotes
              quotes={[
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        ‰ª•‰∏ä„Åå„ÄÅ
                        <H args={{ name: 'bentoBoxPuzzle' }} />
                        „ÅÆÊòéÁ¢∫„Å™Ê≥ïÂâá„Å†„ÄÇÁêÜËß£„Åß„Åç„Åü„Åã„Å™Ôºü
                      </P>
                    </>
                  )
                },
                {
                  type: 'thinking',
                  children: (
                    <>
                      <P>„Å™„ÄÅ„Å™„Çì„Å®„Åã‚Ä¶„Åß„ÇÇ„ÄÅ„Åæ„Å†Ë¶ö„Åà„Åç„Çå„Å¶„Å™„ÅÑ„Å™„ÅÇ„ÄÇ</P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Highlight>
                          Ê≥ïÂâá„ÇíË¶ö„Åà„Åç„Çå„Å¶„ÅÑ„Å™„Åè„Å¶„ÇÇ„ÄÅÊ¨°Âõû„Åæ„ÅüÂæ©Áøí„Åô„Çã„ÅÆ„ÅßÂ§ß‰∏àÂ§´„Å†„ÄÇ
                        </Highlight>
                      </P>
                    </>
                  )
                },
                {
                  type: 'relieved',
                  children: (
                    <>
                      <P>
                        „Éõ„ÉÉ„ÄÅ„Çà„Åã„Å£„Åü‚Ä¶ (ÊÇ™È≠î„Å£„Å¶ÊÑèÂ§ñ„Å®ÂÑ™„Åó„ÅÑ„Çì„Åò„ÇÉÔºü
                        <Emoji>ü§î</Emoji>)
                      </P>
                    </>
                  )
                },
                {
                  type: 'devil',
                  children: (
                    <>
                      <P>
                        <Highlight>
                          Ê¨°Âõû„Åß„ÅØ„ÄÅ„ÇÇ„Å£„Å®Ë§áÈõë„Å™„Éë„Ç∫„É´„ÇíÂá∫È°å„Åô„Çã„ÄÇ
                        </Highlight>
                        Ë®àÁÆóÁÆ±„ÇíËøî„Åó„Å¶„Åª„Åó„Åã„Å£„Åü„Çâ„ÄÅËß£„ÅÑ„Å¶„Åø„Åõ„Çã„Çì„Å†„Å™ÔºÅ
                      </P>
                    </>
                  )
                },
                {
                  type: 'brave',
                  children: (
                    <>
                      <P>Êúõ„ÇÄ„Å®„Åì„Çç„Å†ÔºÅ</P>
                    </>
                  )
                }
              ]}
            />
            <NextLessonButton />
          </>
        )
      }
    ]}
  />
)
